	#1) Write a python program to add two numbers.
def sum(num1 , num2):
    sum = num1 + num2
    return sum

num1 = int(input("enter first number: "))
num2 = int(input("enter second number: "))

result = sum(num1, num2)
print("sum of num1 and num2 is {}: ".format(result))

o/p:-
enter first number: 10
enter second number: 20
sum of num1 and num2 is 30

#2) Write a python program to find quotient and remainder.
def find_q_r(div, dis):
    quotient = div // dis
    remainder = div % dis
    return quotient, remainder

div = int(input("enter divident: "))
dis = int(input("enter divisor: "))

quotient, remainder = find_q_r(div, dis)
print("quotient: ", quotient)
print("remainder: ",remainder)

o/p:-
enter divident: 5
enter divisor: 2
quotient:  2
remainder:  1

#3) Write a python program to find type of objects in your system.
objects = [25, 26, 30, 33.4, "hello", True, None, [1,2,3], (4,5,6), {"a": 1, "b": 2}]
for obj in objects:
    print(f"objects: {obj}, type: {type(obj)}")
	
o/p:-
objects: 25, type: <class 'int'>
objects: 26, type: <class 'int'>
objects: 30, type: <class 'int'>
objects: 33.4, type: <class 'float'>
objects: hello, type: <class 'str'>
objects: True, type: <class 'bool'>
objects: None, type: <class 'NoneType'>
objects: [1, 2, 3], type: <class 'list'>
objects: (4, 5, 6), type: <class 'tuple'>
objects: {'a': 1, 'b': 2}, type: <class 'dict'>

#4) Write a python program to read two numbers and display the greatest number.
def greatest(num1, num2):
    if num1>num2:
        return("first number is greater.")
    else:
        return("second number is greater.")
        
num1 = int(input("enter first number: "))
num2 = int(input("enter second number: "))

result = greatest(num1, num2)
print(result)

o/p:-
enter first number: 10
enter second number: 20
second number is greater.

#5) Write a python program to check whether number is even or odd.
def find_o_e(x):
    if x%2 == 0:
        return("the number is even")
    else:
        return("the number is odd")

x = int(input("enter a number: "))
result = find_o_e(x)
print(result)

o/p:-
enter a number: 2
the number is even

#6) Write a python program to check whether a character is vowel or consonant.
def check_v_c(char):
    vowel = "aeiouAEIOU"
    if char.isalpha() and len(char) == 1:
        if char in vowel:
            return("the character is vowel.")
        else:
            return("the character is consonent.")
    else:
        return("invalid input!!")

char = input("enter a character: ")
result = check_v_c(char)
print(result)

o/p:-
enter a character: 2
invalid input!!
enter a character: c
the character is consonent.
enter a character: a
the character is vowel.

#7) Write a python program to find largest number among three numbers.
def greatest(num1, num2, num3):
    if num1>num2:
        if num1>num3:
            return("first number is greatest.")
    elif num2>num1 and num2>num3:
        return("second number is greatest.")
    else:
        return("third number is greatest.")
        
num1 = input("enter first number: ")
num2 = input("enter second number: ")
num3 = input("enter thied number: ")

result = greatest(num1, num2, num3)
print(result)

o/p:-
enter first number: 10
enter second number: 20
enter thied number: 30
third number is greatest.

#8) Write a python program to find all roots of a quadratic equation.
import cmath


def find_roots(a, b, c):
    
# Calculate discriminant
    
discriminant = (b ** 2) - (4 * a * c)

    
# Check if discriminant is positive, negative or zero
    
if discriminant > 0:
        
# Two real roots
        
root1 = (-b + discriminant ** 0.5) / (2 * a)
        
root2 = (-b - discriminant ** 0.5) / (2 * a)
        
return root1, root2
    
elif discriminant == 0:
        
# One real root
        
root = -b / (2 * a)
        
return root,
    
else:
        
# Two complex roots
        
root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
        
root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
        
return root1, root2


# Example usage

if __name__ == "__main__":
    
a = float(input("Enter coefficient a: "))
    
b = float(input("Enter coefficient b: "))
    
c = float(input("Enter coefficient c: "))

    
roots = find_roots(a, b, c)
    
print("Roots are:", roots)


o/p:-
Enter the coefficient of x^2: 2
Enter the coefficient of x: -5
Enter the constant term: 2
The roots of the quadratic equation are: 2.0 and 0.5

#9) Write a python program to calculate sum of natural numbers.
def sum(n):
    sum = 0
    for i in range(1, n+1):
        sum = sum+i
    return sum

n = int(input("enter a positive integer: "))
result = sum(n)
print(result)

o/p:-
enter a positive integer: 4
10

#10) Write a python program to check leap year.
def leap_year(year):
    if (year %4 == 0 and year %100 != 0) or (year %400 == 0):
        return True
    else: 
        return False

year = int(input("enter a year: "))
if leap_year(year):
    print(year,"is a leap year!")
else:
    print(year, "is not a leap year!")
	
o/p:-
enter a year: 2024
2024 is a leap year!
enter a year: 2021
2021 is not a leap year!

#11) Write a python program to find factorial.
def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

num = int(input("enter a non-negative number: "))
if num<0:
    print("invalid input!!")
else:
    result = factorial(num)
    print("the factorial of ", num, " is ", result)
	
o/p:-
enter a non-negative number: 4
the factorial of  4  is  24

#12) Write a python program to generate multiplication table.
def mul_table(num):
    print("Table for:", num)
    for i in range(1, 11):
        print(f"{num} x {i} = {num * i}")

# Input the number for which you want to generate the multiplication table
num = int(input("Enter a number: "))

# Generate and print the multiplication table
mul_table(num)

o/p:-
Enter a number: 2
Table for: 2
2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
2 x 4 = 8
2 x 5 = 10
2 x 6 = 12
2 x 7 = 14
2 x 8 = 16
2 x 9 = 18
2 x 10 = 20

#13) Write a python program to display fibonacci series. (eg. 0, 1, 1, 2, 3, 5, 8, 13, ...)
def fib_series(n):
   
    series = [0, 1]
    for i in range(2, n):
        next = series[i - 1] + series[i - 2]
        series.append(next)

    return series
num = int(input("Enter the number of terms for Fibonacci series: "))

result = fib_series(num)
print("Fibonacci series up to", num, "terms:", result)

o/p:-
Enter the number of terms for Fibonacci series: 14
Fibonacci series up to 14 terms: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]

#14) Write a python program to find gcd.
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))

result = gcd(num1, num2)
print("The GCD of", num1, "and", num2, "is:", result)

o/p:-
Enter the first number: 10
Enter the second number: 20
The GCD of 10 and 20 is: 10

#15) Write a python program to find lcm.
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def lcm(a, b):
    return abs(a * b) // gcd(a, b)

# Input the two numbers
num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))

# Calculate and print the LCM
result = lcm(num1, num2)
print("The LCM of", num1, "and", num2, "is:", result)

o/p:-
Enter the first number: 10
Enter the second number: 20
The LCM of 10 and 20 is: 20

#16) Write a python program to reverse a number.
def reverse_num(n):
    r_num = 0
    while n > 0:
        digit = n % 10
        r_num = (r_num * 10) + digit
        n //= 10
    return r_num

num = int(input("Enter a number: "))

result = reverse_num(num)

print("The reverse of", num, "is:", result)

o/p:-
Enter a number: 123
The reverse of 123 is: 321

#17) Write a python program to calculate power of a number.
def power(base, expo):
    result = 1
    for _ in range(expo):
        result *= base
    return result

# Input the base and exponent from the user
base = float(input("Enter the base: "))
expo = int(input("Enter the exponent: "))

# Calculate and print the power
result = power(base, expo)
print(f"{base} raised to the power of {expo} is: {result}")

o/p:-
Enter the base: 2
Enter the exponent: 2
2.0 raised to the power of 2 is: 4.0

#18) Write a python program to find binary value of a character.
def c_to_b(char):
    # Convert the character to its ASCII value
    ascii_ = ord(char)
    
    # Initialize an empty string to store the binary representation
    binary_ = ""
    
    # Convert the ASCII value to binary manually
    while ascii_ > 0:
        binary_ = str(ascii_ % 2) + binary_
        ascii_ //= 2
    
    return binary_

# Input the character from the user
character = input("Enter a character: ")

# Check if the input is a single character
if len(character) == 1:
    # Convert the character to binary
    b_result = c_to_b(character)
    print(f"The binary value of '{character}' is: {b_result}")
else:
    print("Please enter a single character.")

o/p:-
Enter a character: j
The binary value of 'j' is: 1101010

#19) Write a python program to display two separate strings in single line continuously.
# Define the strings
string1 = "Hello"
string2 = "World"

# Loop indefinitely to display the strings continuously
while True:
    print(string1 + " " + string2, end=" ")

o/p:-
Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello 
World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World 
Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello 
World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World 
Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello 
World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World 
Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello 
World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World 
Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hel> 

#20) Write a python program to check whether a number is palindrome or not.
def palindrome(num):
    # Convert the number to a string
    num_str = str(num)
    
    # Check if the string is equal to its reverse
    if num_str == num_str[::-1]:
        return True
    else:
        return False

# Input the number from the user
num = int(input("Enter a number: "))

# Check if the number is a palindrome
if palindrome(num):
    print(num, "is a palindrome.")
else:
    print(num, "is not a palindrome.")

o/p:-
Enter a number: 111
111 is a palindrome.
Enter a number: 123
123 is not a palindrome.

#21) Write a python program to check whether a number is prime or not.
def is_prime(num):
    if num <= 1:
        return False
    elif num <= 3:
        return True
    elif num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

# Input the number from the user
num = int(input("Enter a number: "))

# Check if the number is prime
if is_prime(num):
    print(num, "is a prime number.")
else:
    print(num, "is not a prime number.")

o/p:-
Enter a number: 20
20 is not a prime number.
Enter a number: 5
5 is a prime number.

#22) Write a python program to display prime numbers between two intervals.
def is_prime(num):
    if num <= 1:
        return False
    elif num <= 3:
        return True
    elif num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

start = int(input("Enter the start of the interval: "))
end = int(input("Enter the end of the interval: "))

print("Prime numbers between", start, "and", end, "are:")
for num in range(start, end + 1):
    if is_prime(num):
        print(num, end=" ")
		
o/p:-
Enter the start of the interval: 1
Enter the end of the interval: 100
Prime numbers between 1 and 100 are:
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 

#23) Write a python program to check armstrong number. (eg. 13 + 33 + 53 = 153)
def armstrong(num):
    order = len(str(num))
    sum = 0
    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** order
        temp //= 10
    return num == sum
number = int(input("Enter a number: "))
if armstrong(number):
    print(number, "is an Armstrong number")
else:
    print(number, "is not an Armstrong number")

o/p:-
Enter a number: 4
4 is an Armstrong number
Enter a number: 122
122 is not an Armstrong number

#24) Write a python program to display armstrong number between two intervals.
def armstrong(num):
    order = len(str(num))
    sum = 0
    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** order
        temp //= 10
    return num == sum


start = int(input("Enter the starting interval: "))
end = int(input("Enter the ending interval: "))


print("Armstrong numbers between", start, "and", end, "are:")
for num in range(start, end + 1):
    if armstrong(num):
        print(num)

o/p:-
Enter the starting interval: 1
Enter the ending interval: 10
Armstrong numbers between 1 and 10 are:
1
2
3
4
5
6
7
8
9

#25) Write a python program to display factors of a number.
def factors(num):
    print("Factors of", num, "are:")
    for i in range(1, num + 1):
        if num % i == 0:
            print(i)


number = int(input("Enter a number: "))
factors(number)

o/p:-
Enter a number: 22
Factors of 22 are:
1
2
11
22

#26) Write a python programs to create pyramid and pattern.
def pyramid(rows):
    for i in range(rows):
        print(" "*(rows-i-1) + "*"*(2*i+1))


def pattern(rows):
    for i in range(1, rows+1):
        print("*" * i)


rows = int(input("Enter the number of rows: "))
print("Pyramid:")
pyramid(rows)
print("\nPattern:")
pattern(rows)

o/p:-
Enter the number of rows: 10
Pyramid:
         *
        ***
       *****
      *******
     *********
    ***********
   *************
  ***************
 *****************
*******************

Pattern:
*
**
***
****
*****
******
*******
********
*********
**********

#27) Write a python program to make a simple calculator to add, subtract, multiply or divide
def add(x, y):
    return x + y


def subtract(x, y):
    return x - y


def multiply(x, y):
    return x * y


def divide(x, y):
    if y == 0:
        return "Cannot divide by zero"
    else:
        return x / y


print("Select operation:")
print("1. Add")
print("2. Subtract")
print("3. Multiply")
print("4. Divide")


choice = input("Enter choice (1/2/3/4): ")


if choice in ('1', '2', '3', '4'):
    num1 = float(input("Enter first number: "))
    num2 = float(input("Enter second number: "))


    if choice == '1':
        print("Result:", add(num1, num2))
    elif choice == '2':
        print("Result:", subtract(num1, num2))
    elif choice == '3':
        print("Result:", multiply(num1, num2))
    elif choice == '4':
        print("Result:", divide(num1, num2))
else:
    print("Invalid input")

o/p:-
Select operation:
1. Add
2. Subtract
3. Multiply
4. Divide
Enter choice (1/2/3/4): 1
Enter first number: 10
Enter second number: 20
Result: 30.0

#28) Write a python program to display Simple Number Triangle Pattern
def triangle(rows):
    for i in range(1, rows + 1):
        for j in range(1, i + 1):
            print(j, end=" ")
        print()


rows = int(input("Enter the number of rows: "))
triangle(rows)

o/p:-
Enter the number of rows: 10
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 
1 2 3 4 5 6 
1 2 3 4 5 6 7 
1 2 3 4 5 6 7 8 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 10 

#29) Write a python program to display inverted pyramid of numbers
def inv_pyramid(rows):
    for i in range(rows, 0, -1):
        print(" "*(rows-i) + "* "*(i))


rows = int(input("Enter the number of rows: "))
inv_pyramid(rows)

o/p:-
Enter the number of rows: 10
* * * * * * * * * * 
 * * * * * * * * * 
  * * * * * * * * 
   * * * * * * * 
    * * * * * * 
     * * * * * 
      * * * * 
       * * * 
        * * 
         * 

#30) Write a python program to display inverted pyramid of descending numbers
def inv_desc_pyramid(rows):
    num = 1
    for i in range(rows, 0, -1):
        for _ in range(0, rows - i):
            print(" ", end="")
        for _ in range(0, i):
            print(num, end=" ")
            num += 1
        print()


rows = int(input("Enter the number of rows: "))
inv_desc_pyramid(rows)

o/p:-
Enter the number of rows: 10
1 2 3 4 5 6 7 8 9 10 
 11 12 13 14 15 16 17 18 19 
  20 21 22 23 24 25 26 27 
   28 29 30 31 32 33 34 
    35 36 37 38 39 40 
     41 42 43 44 45 
      46 47 48 49 
       50 51 52 
        53 54 
         55 


#31) Write a python program to display inverted pyramid of the same digit
def inverted_same_digit_pyramid(rows, digit):
    for i in range(rows, 0, -1):
        print(str(digit) * i)


rows = int(input("Enter the number of rows: "))
digit = int(input("Enter the digit to repeat: "))
inverted_same_digit_pyramid(rows, digit)
32
def reverse_pyramid(rows):
    for i in range(rows, 0, -1):
        print(" "*(rows-i) + "* "*(i))


rows = int(input("Enter the number of rows: "))
reverse_pyramid(rows)

o/p:-
Enter the number of rows: 10
Enter the digit to repeat: 0
0000000000
000000000
00000000
0000000
000000
00000
0000
000
00
0

#32) Write a python program to display reverse pyramid of numbers
def inv_half_pyramid(rows):
    for i in range(rows, 0, -1):
        for j in range(1, i + 1):
            print(j, end=" ")
        print()


rows = int(input("Enter the number of rows: "))
inv_half_pyramid(rows)

o/p:-
Enter the number of rows: 10
1 2 3 4 5 6 7 8 9 10 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 
1 2 3 4 5 6 7 
1 2 3 4 5 6 
1 2 3 4 5 
1 2 3 4 
1 2 3 
1 2 
1 

#33) Write a python program to display inverted half pyramid number pattern
def inv_half_pyramid(rows):
    # Iterate over rows in reverse order
    for i in range(rows, 0, -1):
        # Print numbers for current row
        for j in range(1, i + 1):
            print(j, end=" ")
        # Move to the next line for the next row
        print()

# Input the number of rows for the inverted half pyramid
rows = int(input("Enter the number of rows for the inverted half pyramid: "))

# Call the function to display the inverted half pyramid
inv_half_pyramid(rows)

o/p:-
Enter the number of rows for the inverted half pyramid: 10
1 2 3 4 5 6 7 8 9 10 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 
1 2 3 4 5 6 7 
1 2 3 4 5 6 
1 2 3 4 5 
1 2 3 4 
1 2 3 
1 2 
1 


#34) Write a python program to display pyramid of natural numbers less than 10
def pyramid():
    # Iterate over rows
    for i in range(1, 10):
        # Print spaces for formatting
        print(" " * (10 - i), end="")
        
        # Print numbers for current row
        for j in range(1, i + 1):
            print(j, end=" ")
        
        # Move to the next line for the next row
        print()

# Call the function to display the pyramid
pyramid()

o/p:-
         1 
        1 2 
       1 2 3 
      1 2 3 4 
     1 2 3 4 5 
    1 2 3 4 5 6 
   1 2 3 4 5 6 7 
  1 2 3 4 5 6 7 8 
 1 2 3 4 5 6 7 8 9 

#35) Write a python program to display reverse pattern of digits from 10
def reverse_pattern():
    # Iterate over rows in reverse order
    for i in range(10, 0, -1):
        # Print the numbers in reverse order
        for j in range(10, 10 - i, -1):
            print(j, end=" ")
        # Move to the next line for the next row
        print()

reverse_pattern()

o/p:-
10 9 8 7 6 5 4 3 2 1 
10 9 8 7 6 5 4 3 2 
10 9 8 7 6 5 4 3 
10 9 8 7 6 5 4 
10 9 8 7 6 5 
10 9 8 7 6 
10 9 8 7 
10 9 8 
10 9 
10 

#36) Write a python program to display connected inverted pyramid pattern of numbers
def inverted_pyramid(n):
    # Iterate over rows
    for i in range(n, 0, -1):
        # Print spaces
        print(" " * (n - i), end="")
        
        # Print numbers in descending order
        for j in range(i, 0, -1):
            print(j, end=" ")
        
        # Print numbers in ascending order
        for j in range(2, i + 1):
            print(j, end=" ")
        
        # Move to the next line for the next row
        print()

rows = int(input("Enter the number of rows for the inverted pyramid: "))

inverted_pyramid(rows)

o/p:-
Enter the number of rows for the inverted pyramid: 10
10 9 8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 9 10 
 9 8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 9 
  8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 
   7 6 5 4 3 2 1 2 3 4 5 6 7 
    6 5 4 3 2 1 2 3 4 5 6 
     5 4 3 2 1 2 3 4 5 
      4 3 2 1 2 3 4 
       3 2 1 2 3 
        2 1 2 
         1 

#37) Write a python program to display even number pyramid pattern
def even_pyramid(n):
    # Iterate over rows
    for i in range(1, n + 1):
        # Print spaces
        print(" " * (n - i), end="")
        
        # Print even numbers in ascending order
        for j in range(2, i * 2 + 1, 2):
            print(j, end=" ")
        
        # Print even numbers in descending order
        for j in range((i - 1) * 2, 0, -2):
            print(j, end=" ")
        
        # Move to the next line for the next row
        print()

rows = int(input("Enter the number of rows for the even number pyramid: "))

even_pyramid(rows)

o/p:-
Enter the number of rows for the even number pyramid: 10
         2 
        2 4 2 
       2 4 6 4 2 
      2 4 6 8 6 4 2 
     2 4 6 8 10 8 6 4 2 
    2 4 6 8 10 12 10 8 6 4 2 
   2 4 6 8 10 12 14 12 10 8 6 4 2 
  2 4 6 8 10 12 14 16 14 12 10 8 6 4 2 
 2 4 6 8 10 12 14 16 18 16 14 12 10 8 6 4 2 
2 4 6 8 10 12 14 16 18 20 18 16 14 12 10 8 6 4 2 


#38) Write a python program to display pyramid of horizontal tables
def horizontal_tbl_pyramid(n):
    # Iterate over rows
    for i in range(1, n + 1):
        # Print tables horizontally
        for j in range(1, i + 1):
            print(f"{i * j:4}", end="")
        # Move to the next line for the next row
        print()

rows = int(input("Enter the number of rows for the horizontal table pyramid: "))

horizontal_tbl_pyramid(rows)

o/p:-
Enter the number of rows for the horizontal table pyramid: 10
   1
   2   4
   3   6   9
   4   8  12  16
   5  10  15  20  25
   6  12  18  24  30  36
   7  14  21  28  35  42  49
   8  16  24  32  40  48  56  64
   9  18  27  36  45  54  63  72  81
  10  20  30  40  50  60  70  80  90 100

#39) Write a python program to display pyramid pattern of alternate numbers
def alt_num_pyramid(n):
    num = 1
    # Iterate over rows
    for i in range(1, n + 1):
        # Print spaces
        print(" " * (n - i), end="")
        
        # Print numbers in ascending order
        for j in range(1, i * 2, 2):
            print(num, end=" ")
            num += 2
        
        # Move to the next line for the next row
        print()

rows = int(input("Enter the number of rows for the alternate number pyramid: "))

alt_num_pyramid(rows)

o/p:-
Enter the number of rows for the alternate number pyramid: 10
         1 
        3 5 
       7 9 11 
      13 15 17 19 
     21 23 25 27 29 
    31 33 35 37 39 41 
   43 45 47 49 51 53 55 
  57 59 61 63 65 67 69 71 
 73 75 77 79 81 83 85 87 89 
91 93 95 97 99 101 103 105 107 109 


#40) Write a python program to display mirrored pyramid (right-angled triangle) pattern of numbers
def miror_pyramid(n):
    # Iterate over rows
    for i in range(1, n + 1):
        # Print numbers in each row
        for j in range(1, i + 1):
            print(j, end=" ")
        # Move to the next line for the next row
        print()
    # Iterate over rows in reverse order (excluding the first row)
    for i in range(n - 1, 0, -1):
        # Print numbers in each row
        for j in range(1, i + 1):
            print(j, end=" ")
        # Move to the next line for the next row
        print()

rows = int(input("Enter the number of rows for the mirrored pyramid: "))

miror_pyramid(rows)

o/p:-
Enter the number of rows for the mirrored pyramid: 10
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 
1 2 3 4 5 6 
1 2 3 4 5 6 7 
1 2 3 4 5 6 7 8 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 10 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 
1 2 3 4 5 6 7 
1 2 3 4 5 6 
1 2 3 4 5 
1 2 3 4 
1 2 3 
1 2 
1 


#41) Write a python program to display equilateral triangle with stars (asterisk symbol)
def equi_triangle(rows):
    # Iterate over rows
    for i in range(1, rows + 1):
        # Print spaces for formatting
        print(" " * (rows - i), end="")
        
        # Print stars for current row
        print("* " * i)

rows = int(input("Enter the number of rows for the equilateral triangle: "))

equi_triangle(rows)

o/p:-
Enter the number of rows for the equilateral triangle: 10
         * 
        * * 
       * * * 
      * * * * 
     * * * * * 
    * * * * * * 
   * * * * * * * 
  * * * * * * * * 
 * * * * * * * * * 
* * * * * * * * * * 


#42) Write a python program to display downward triangle pattern of stars
def down_triangle(rows):
    # Iterate over rows in reverse order
    for i in range(rows, 0, -1):
        # Print stars for current row
        print("* " * i)

rows = int(input("Enter the number of rows for the downward triangle: "))

down_triangle(rows)

o/p:-
Enter the number of rows for the downward triangle: 10
* * * * * * * * * * 
* * * * * * * * * 
* * * * * * * * 
* * * * * * * 
* * * * * * 
* * * * * 
* * * * 
* * * 
* * 
* 


#43) Write a python program to display pyramid pattern of stars
def pyramid(rows):
   
    for i in range(1, rows + 1):
        
        print(" " * (rows - i), end="")
        
        print("* " * i)

rows = int(input("Enter the number of rows for the pyramid: "))

pyramid(rows)

o/p:-
Enter the number of rows for the pyramid: 10
         * 
        * * 
       * * * 
      * * * * 
     * * * * * 
    * * * * * * 
   * * * * * * * 
  * * * * * * * * 
 * * * * * * * * * 
* * * * * * * * * * 

#44) Write a python program to display hourglass pattern program
def hourglass(rows):
   
    for i in range(rows, 0, -1):
       
        print(" " * (rows - i), end="")
        
        print("*" * (2 * i - 1))
    
    for i in range(2, rows + 1):
        
        print(" " * (rows - i), end="")
        
        print("*" * (2 * i - 1))

rows = int(input("Enter the number of rows for the hourglass: "))

hourglass(rows)

o/p:-
Enter the number of rows for the hourglass: 10
*******************
 *****************
  ***************
   *************
    ***********
     *********
      *******
       *****
        ***
         *
        ***
       *****
      *******
     *********
    ***********
   *************
  ***************
 *****************
*******************


#45) Write a python program to display pascal’s triangle program
def generate_pascals_triangle(rows):
    triangle = []
    for i in range(rows):
        row = [1] * (i + 1)
        for j in range(1, i):
            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
        triangle.append(row)
    return triangle

def display_pascals_triangle(triangle):
    for row in triangle:
        print(" ".join(map(str, row)).center(len(triangle[-1]) * 2))

rows = int(input("Enter the number of rows for Pascal's triangle: "))

# Generate Pascal's triangle
pascals_triangle = generate_pascals_triangle(rows)

# Display Pascal's triangle
display_pascals_triangle(pascals_triangle)

o/p:-
Enter the number of rows for Pascal's triangle: 10
         1          
        1 1         
       1 2 1        
      1 3 3 1       
     1 4 6 4 1      
   1 5 10 10 5 1    
  1 6 15 20 15 6 1  
1 7 21 35 35 21 7 1 
1 8 28 56 70 56 28 8 1
1 9 36 84 126 126 84 36 9 1